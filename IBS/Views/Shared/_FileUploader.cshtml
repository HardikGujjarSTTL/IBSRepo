@model IBS.Models.FileUploaderDTO
@using IBS.Helper;
@using System.Configuration;
<style>
    .loader {
        border: 5px solid #f3f3f3;
        -webkit-animation: spin 1s linear infinite;
        animation: spin 1s linear infinite;
        border-top: 5px solid #555;
        border-radius: 50%;
        width: 25px;
        height: 25px;
    }

    @@keyframes spin {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }
    }

    input[type="file"] {
        font-size: 87.5%;
        border: unset !important;
        background-color: transparent !important;
    }

    th, td, .tableData th, .tableData td {
        border: none;
        padding: 8px 10px;
        border-bottom: 1px solid #cfd8dc;
        border-right: 1px solid #cfd8dc;
    }

    table, .tableData {
        border-collapse: separate;
        border-spacing: 0;
        width: 100%;
        empty-cells: show;
        border: none;
        border-top: 1px solid #cfd8dc;
        border-left: 1px solid #cfd8dc;
    }

    

    .fileUploadWrap {
        padding: unset !important;
    }
</style>

@* File uploader Start *@
<div id="FileUploadValidation" style="color:red"></div>

@{
    bool isEditMode = false;
    if (Model.Mode == (int)Enums.FileUploaderMode.Add_Edit)
    {
        isEditMode = true;
    }
}
@if (Model != null && Model.FilUploadMode == (int)Enums.FilUploadMode.Single)
{
    for (int i = 0; i < Model.IBS_DocumentList.Count; i++)
    {
        var uniqueId = Model.IBS_DocumentList[i].UploaderIDName;
        if (Model.IBS_DocumentList[i].FYID > 0)
        {
            uniqueId = uniqueId + "_" + Model.IBS_DocumentList[i].FYID;
        }

        <div class="formInputs">
            <label id="lblDocumentName_@uniqueId">@(Model.IBS_DocumentList[i].DocumentName)</label>
            @if (Convert.ToBoolean(Model.IBS_DocumentList[i].IsDownloadTemplate) == true)
            {
                <text><br />Download from
                    <a href="javascript:void(0);" id="TemplateDocumentDocument_@i" onclick="thisGetTemplateDocument(@Model.IBS_DocumentList[i].DocumentCategory, @Model.IBS_DocumentList[i].DocumentID);">here</a></text>
            }
            <span class="astric">
                @(Convert.ToBoolean(Model.IBS_DocumentList[i].Ismandatory) ? "*" : "")
            </span>
            <div class="fieldOuter">
                <div @if (isEditMode) { <text> class="divSingleDocument" </text> } id="@uniqueId">

                    <input type="hidden" id="@("hdnSingleDocumentCategory_" + uniqueId)" value="@(Model.IBS_DocumentList[i].DocumentCategory)" />
                    <input type="hidden" id="@("hdnSingleDocName_" + uniqueId)" value="@(Model.IBS_DocumentList[i].DocumentName)" />
                    <input type="hidden" id="@("hdnSingleAPPDocumentID_" + uniqueId)" value="@(Model.IBS_DocumentList[i].APPDocumentID)" />
                    <input type="hidden" id="@("hdnSingleDocumentID_" + uniqueId)" value="@(Model.IBS_DocumentList[i].ID)" />
                    <input type="hidden" id="@("hdnSingleVerifyDSC_" + uniqueId)" value="@(Model.IBS_DocumentList[i].VerifyDSC.ToString())" />
                    <input type="hidden" id="@("hdnSingleRelativePath_" + uniqueId)" value="@(Model.IBS_DocumentList[i].RelativePath)" />
                    <input type="hidden" id="@("hdnSingleIsMandatory_" + uniqueId)" value="@(isEditMode && Convert.ToBoolean(Model.IBS_DocumentList[i].Ismandatory) ? "true" : "false")" />
                    <input type="hidden" id="@("hdnSingleFYID_" + uniqueId)" value="@(Model.IBS_DocumentList[i].FYID)" />

                    <span class="rightAction" id="@("File_" + uniqueId)" style="width:100% !important">
                        @if (!string.IsNullOrEmpty(Model.IBS_DocumentList[i].FileDisplayName))
                        {
                                        <a class="aTag" target="_blank" href="@(Url.Content(Model.IBS_DocumentList[i].RelativePath + "/" + Model.IBS_DocumentList[i].FileID))" id="DocUpload_@(uniqueId)">@Model.IBS_DocumentList[i].FileDisplayName</a>

                            if (Model.Mode == (int)Enums.FileUploaderMode.Add_Edit)
                            {
                                <input type="button" id="@Model.IBS_DocumentList[i].FileID" onclick="DeleteFile('@Model.IBS_DocumentList[i].FileID','@uniqueId')" class="delete button clsDelete" value="Delete">
                            }
                        }
                    </span>
                    <div style="display: @(string.IsNullOrEmpty(Model.IBS_DocumentList[i].FileDisplayName) ? "block" : "none");" id="@("Div_" + uniqueId)" class="fileUploadWrap">
                        @if (Model.Mode == (int)Enums.FileUploaderMode.Add_Edit)
                        {
                            <input name="UploadFile" type="file" id="@("Brw_" + uniqueId)" onchange="OnFileUpload('@uniqueId', @Model.IBS_DocumentList[i].ID, this, true)"
                                   data-filesize="@((Model.IBS_DocumentList[i].MaxContentLengthInKB ?? Convert.ToInt32(ConfigurationManager.AppSettings["MaxContentLengthInKB"])))" 
                                        style="background: #f1f1f1;width: 100%;padding: 8px 20px;padding-right: 20px;font-weight: 400;padding-right: 35px;border-radius: 0;-webkit-border-radius: 0;color: #393939;font-family: 'Poppins', sans-serif;font-size: 16px;line-height: 1.5;">

                            <label for="@("Brw_" + uniqueId)">
                                @*@(Model.IBS_DocumentList[i].DocumentName)
                                    <span >
                                        @(Model.IBS_DocumentList[i].IsMandatory ? "*" : "")
                                    </span>*@
                                Upload File
                            </label>
                            <span style='font-size: 14px;'>File size upto @((Model.IBS_DocumentList[i].MaxContentLengthInKB ?? Convert.ToInt32(ConfigurationManager.AppSettings["MaxContentLengthInKB"])) / 1024) MB (only @Model.IBS_DocumentList[i].AllowedFileExtensions)</span>
                        }
                    </div>
                    <div style='color: red; font-size: 14px;' id="@("ValidationMSG_" + uniqueId)"></div>
                    <div id="@("Loader_" + uniqueId)" class="loader" style="display:none; position:relative"></div>
                </div>
            </div>
        </div>
    }
}
else
{
    <div class="fileUploadTable" style="width:50%;">
        <h2>@(!string.IsNullOrEmpty(Model.MainTitle) ? Model.MainTitle : "Mandatory Documents")</h2>

        <table @if (isEditMode) { <text> id="tblMainDocuments" </text> }
               class="tableData">
            <thead>
                <tr class="evenRow lastTr" role="row">
                    <th style="width:45%;">
                        Document Name
                    </th>
                    <th>
                        Uploaded Doc
                    </th>
                </tr>
            </thead>
            <tbody>
                @if (Model != null && Model.IBS_DocumentList != null)
                {
                    for (int i = 0; i < Model.IBS_DocumentList.Count; i++)
                    {
                        <tr id="tr_@Model.IBS_DocumentList[i].ID" name="@(isEditMode && Convert.ToBoolean(Model.IBS_DocumentList[i].Ismandatory) ? "ValidateRow" : "")"
                                        role="row" class="@(isEditMode && Convert.ToBoolean(Model.IBS_DocumentList[i].Ismandatory) ? "ValidateRow" : "")">
                            <td>
                                <label>@Model.IBS_DocumentList[i].DocumentName</label>
                                <span>
                                    @(Convert.ToBoolean(Model.IBS_DocumentList[i].Ismandatory) ? "*" : "")
                                </span>
                                @*@if (Model.isDSC && isEditMode)*@
                                @if (Convert.ToBoolean(Model.IBS_DocumentList[i].VerifyDSC) && isEditMode)
                                {
                                    // function GetDSCDocument(DocumentCategory,DocumentID) must be defined by rendering View
                                    <text><br />Download from
                                        <a href="javascript:void(0);" id="DSCDocument_@i" onclick="thisGetDSCDocument(@Model.IBS_DocumentList[i].DocumentCategory, @Model.IBS_DocumentList[i].DocumentID);">here</a> to sign</text>
                                }
                            </td>
                            <td style="text-align: right !important;">
                                <input type="hidden" id="@("hdnAppDocumentID_" + Model.IBS_DocumentList[i].UploaderIDName)" value="@(Model.IBS_DocumentList[i].APPDocumentID)" />
                                <input type="hidden" id="@("hdnDocumentID_" + Model.IBS_DocumentList[i].UploaderIDName)" value="@(Model.IBS_DocumentList[i].ID)" />
                                <input type="hidden" id="@("hdnVerifyDSC_" + Model.IBS_DocumentList[i].UploaderIDName)" value="@(Model.IBS_DocumentList[i].VerifyDSC.ToString())" />
                                <input type="hidden" id="@("hdnRelativePath_" + Model.IBS_DocumentList[i].UploaderIDName)" value="@(Model.IBS_DocumentList[i].RelativePath)" />
                                <span id="@("File_" + Model.IBS_DocumentList[i].UploaderIDName)" style="float: right;">
                                    @if (!string.IsNullOrEmpty(Model.IBS_DocumentList[i].FileDisplayName))
                                    {
                                        if (Convert.ToBoolean(Model.IBS_DocumentList[i].VerifyDSC))
                                        {
                                            <a onclick="GetSignedDoc('@(Url.Content("~" + Model.IBS_DocumentList[i].RelativePath + "/" + Model.IBS_DocumentList[i].FileID))','@Model.IBS_DocumentList[i].FileDisplayName')">@Model.IBS_DocumentList[i].FileDisplayName</a>
                                        }
                                        else
                                        {
                                            <a target="_blank" href="@(Url.Content("~" + Model.IBS_DocumentList[i].RelativePath + "/" + Model.IBS_DocumentList[i].FileID))">@Model.IBS_DocumentList[i].FileDisplayName</a>
                                        }
                                        if (Model.Mode == (int)Enums.FileUploaderMode.Add_Edit)
                                        {
                                            <a id="@Model.IBS_DocumentList[i].FileID" style="cursor:pointer;"
                                               onclick="DeleteFile('@Model.IBS_DocumentList[i].FileID','@Model.IBS_DocumentList[i].UploaderIDName')" class="delete"><i class="fa fa-times" aria-hidden="true" title="Delete"></i></a>
                                        }
                                    }
                                </span>
                                <div style="text-align: right !important;display: @(string.IsNullOrEmpty(Model.IBS_DocumentList[i].FileDisplayName) ? "block" : "none");" id="@("Div_" + Model.IBS_DocumentList[i].UploaderIDName)">
                                    @if (Model.Mode == (int)Enums.FileUploaderMode.Add_Edit)
                                    {
                                        <input type="file" name="UploadFile" id="@("Brw_" + Model.IBS_DocumentList[i].UploaderIDName)"
                                               onchange="OnFileUpload('@Model.IBS_DocumentList[i].UploaderIDName', @Model.IBS_DocumentList[i].ID, this, false)" data-filesize="@((Model.IBS_DocumentList[i].MaxContentLengthInKB ?? Convert.ToInt32(ConfigurationManager.AppSettings["MaxContentLengthInKB"])))" 
                                                               style="background: #f1f1f1;width: 100%;padding: 8px 20px;padding-right: 20px;font-weight: 400;position: relative;padding-right: 35px;border-radius: 0;-webkit-border-radius: 0;color: #393939;font-family: 'Poppins', sans-serif;font-size: 16px;line-height: 1.5;"/>
                                        <br />
                                        <span style='font-size: 14px;'>File size upto @((Model.IBS_DocumentList[i].MaxContentLengthInKB ?? Convert.ToInt32(ConfigurationManager.AppSettings["MaxContentLengthInKB"])) / 1024) MB (only @Model.IBS_DocumentList[i].AllowedFileExtensions)</span>
                                    }
                                </div>
                                <div class="cf" style='color: red; font-size: 12px;text-align: right !important;' id="@("ValidationMSG_" + Model.IBS_DocumentList[i].UploaderIDName)"></div>
                                <div id="@("Loader_" + Model.IBS_DocumentList[i].UploaderIDName)" class="loader" style="float: right;display:none; position:relative"></div>
                            </td>
                        </tr>
                        //}
                        //}
                    }
                }

            </tbody>
        </table>
    </div>
    <div class="cf">
        <div class="fileUploadTable">
            @* Other Document List Start*@
            @if (Model.OthersSection == true
                        && ((Model.Mode == (int)Enums.FileUploaderMode.Add_Edit && Model.MaxUploaderinOthers > 0) || (Model.Mode == (int)Enums.FileUploaderMode.View && Model.OtherDocumentList.Count > 0)))
            {
                <div class="createCommittee">
                    <h2>Other Documents</h2>
                </div>

                <div class="dasboardTable">
                    <table @if (isEditMode) { <text> id="tblOtherDocuments" </text> }
                           class="">
                        <thead>
                            <tr class="evenRow lastTr" role="row">
                                <th style="width:45%;">
                                    Document Name
                                </th>
                                <th>
                                    Uploaded Doc
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            @{
                                int rowcount = Model.MaxUploaderinOthers;
                                if (Model.Mode == (int)Enums.FileUploaderMode.View)
                                {
                                    rowcount = Model.OtherDocumentList.Count;
                                }
                            }
                            @for (int i = 0; i < rowcount; i++)
                            {
                                <tr role="row">
                                    <td>
                                        <input type="text" id="@("DocName_"+i)"
                                               value="@(i < Model.OtherDocumentList.Count && !string.IsNullOrEmpty(Model.OtherDocumentList[i].OtherDocumentName) ? Model.OtherDocumentList[i].OtherDocumentName : "")"
                                               @(Model.Mode ==(int)Enums.FileUploaderMode.View ? "readonly" : "") />

                                    </td>
                                    <td>
                                        <input type="hidden" value="@(i < Model.OtherDocumentList.Count ? Convert.ToString(Model.OtherDocumentList[i].APPDocumentID) : "")" />
                                        <span id="@("File_"+i)" style="float: right;">
                                            @if (i < Model.OtherDocumentList.Count && !string.IsNullOrEmpty(Model.OtherDocumentList[i].FileDisplayName))
                                            {
                                                <a target="_blank" href="@(Url.Content("~" + Model.OtherDocumentList[i].RelativePath + "/" + Model.OtherDocumentList[i].FileID))">
                                                    @Model.OtherDocumentList[i].FileDisplayName
                                                </a>
                                                if (Model.Mode == (int)Enums.FileUploaderMode.Add_Edit)
                                                {
                                                    <a id="@Model.OtherDocumentList[i].FileID" style="cursor:pointer;"
                                                       onclick="DeleteFile('@Model.OtherDocumentList[i].FileID','@i')" class="delete"><i class="fa fa-times" aria-hidden="true" title="Delete"></i></a>
                                                }
                                            }
                                        </span>
                                        <div id="@("Div_"+i)" style="float: right; display: @( (i < Model.OtherDocumentList.Count && !string.IsNullOrEmpty(Model.OtherDocumentList[i].FileDisplayName)) ? "none" : "block");">
                                            @if (Model.Mode == (int)Enums.FileUploaderMode.Add_Edit)
                                            {
                                                <input type="file" name="UploadFile" id="@("Brw_"+i)"
                                                       onchange="OnFileUpload('@i', 0, this, false)" data-filesize="@(ConfigurationManager.AppSettings["AllowedFileExtensions"])" />
                                                <br />
                                                <span style='font-size: 14px;'>File size upto @((Model.IBS_DocumentList[i].MaxContentLengthInKB ?? Convert.ToInt32(ConfigurationManager.AppSettings["MaxContentLengthInKB"])) / 1024) MB (only @Model.IBS_DocumentList[i].AllowedFileExtensions)</span>
                                            }
                                        </div>
                                        <div class="uploadValerror" id="@("ValidationMSG_"+i)"></div>
                                        <div id="@("Loader_" + i)" class="loader" style="float: right; display: none; position:relative"></div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>
    <div class="cf" style="text-align: right !important;">
        <input type="hidden" id="hdnDocumentCategoryID" value="@(Model != null && Model.IBS_DocumentList != null? Model.IBS_DocumentList[0].DocumentCategory:0 )" />
    </div>
    @* Other Document List End*@
}

<script type="text/javascript">

    @if (Model.isDSC)
    {
        <text>
    setTimeout(function () {
        //if (!$.isFunction(window.GetDSCDocument))
        //    alert('Please define GetDSCDocument()');
    }, 500);
    </text>
    }

    function thisGetDSCDocument(DocumentCategory, DocumentID) {
        if (!$.isFunction(window.GetDSCDocument))
            alert('Please define GetDSCDocument()');
        else
            GetDSCDocument(DocumentCategory, DocumentID);
    }

    $(document).ready(function () {
        ////   SetDocumentVisibilityAndValitity();

    });

    function GetFile(FilePath) {
        window.location.href = FilePath;
    }

    function GetSignedDoc(FilePath, fileName) {
        var url = "@Url.Action("EmptyPDFForDigitalSignature", "AuthorizedSignatory")" + "?filepath=" + FilePath + "&fileName=" + fileName;
        window.location.href = url;
    }

    function SaveDocuments() {
        var DocList = GetDocumentList();

        if (DocList != false) {
            $("#hdnUploadedDocumentList").val(JSON.stringify(GetDocumentList()));
            return true;
        }
        else {
            return false;
        }
    }

    function GetDocumentList() {

        if (!IsValidDocuments()) return false;

        var DocumentList = [];
        var DocumentCategoryID = $("#hdnDocumentCategoryID").val();

        $("#tblMainDocuments tbody tr").each(function (i, e) {
            var DocOBJ = $("td:eq(0) label:eq(0)", this);
            var spanOBJ = $("span:eq(1)", this);
            var AppDocumentID = $("td input:eq(0)", this)[0].value;
            var DocumentID = $("td input:eq(1)", this)[0].value;
            var VerifyDSC = $("td input:eq(2)", this)[0].value;
            var DocName = DocOBJ[0].innerText.replace("*", "");
            var UniqueFileName = $("span a:nth-child(2)", this).attr("id");
            var FileName = spanOBJ[0].innerText;
            var RelativePath = $("td input:eq(3)", this)[0].value;

            if (UniqueFileName) {
                var Document = { AppDocumentID: AppDocumentID, DocumentID: DocumentID, DocName: DocName, UniqueFileName: UniqueFileName, FileName: FileName, DocumentCategoryID: DocumentCategoryID, VerifyDSC: VerifyDSC, RelativePath: RelativePath };
                DocumentList.push(Document);
            }
        });


        $("#tblOtherDocuments tbody tr").each(function (i, e) {

            var DocOBJ = $("td:eq(0) input", this);
            var spanOBJ = $("span:eq(0)", this);
            var AppDocumentID = $("td input:eq(1)", this)[0].value;
            var DocumentID = 0;
            var DocName = DocOBJ[0].value;
            var UniqueFileName = $("span a:nth-child(2)", this).attr("id");
            var FileName = spanOBJ[0].innerText;

            if (UniqueFileName) {
                var Document = { AppDocumentID: AppDocumentID, DocumentID: DocumentID, DocName: DocName, UniqueFileName: UniqueFileName, FileName: FileName, DocumentCategoryID: DocumentCategoryID };
                DocumentList.push(Document);
            }
        });

        $(".divSingleDocument").each(function (i, e) {
            var Id = $(this).attr("id");

            var DocumentCategoryID = $("#hdnSingleDocumentCategory_" + Id).val();
            var DocName = $("#hdnSingleDocName_" + Id).val();
            var FileName = $("#DocUpload_" + Id).html();
            var AppDocumentID = $("#hdnSingleAPPDocumentID_" + Id).val();
            var DocumentID = $("#hdnSingleDocumentID_" + Id).val();
            var VerifyDSC = $("#hdnSingleVerifyDSC_" + Id).val();
            var UniqueFileName = $("#File_" + Id + " .clsDelete").attr("id");
            var RelativePath = $("#hdnSingleRelativePath_" + Id).val();

            if (UniqueFileName) {
                var Document = { AppDocumentID: AppDocumentID, DocumentID: DocumentID, DocName: DocName, UniqueFileName: UniqueFileName, FileName: FileName, DocumentCategoryID: DocumentCategoryID, VerifyDSC: VerifyDSC, RelativePath: RelativePath };
                DocumentList.push(Document);
            }
        });
        
        return DocumentList;
    }

    function IsValidDocuments() {
        //
        var ValidationgRows = $('.ValidateRow');
        var html = '';

        $(".ValidateRow").each(function (i, e) {
            //
            var validationObj = $("td:eq(1) div:eq(1)", this);
            var DocOBJ = $("td:eq(0)", this);
            var spanOBJ = $("span:eq(1)", this);

            if (spanOBJ) {
                var DocName = DocOBJ[0].innerText.replace("*", "");
                var FileName = spanOBJ[0].innerText;

                if (!FileName) {
                    if (html == "") html = '<ul>'
                    //html += '<li>' + 'Please upload ' + DocName + '</li>';
                    validationObj[0].innerText = 'Please upload ' + DocName;
                }
                else {
                    validationObj[0].innerText = "";
                }
            }
        });

        $(".divSingleDocument").each(function (i, e) {

            var Id = $(this).attr("id");
            var IsMandatory = $("#hdnSingleIsMandatory_" + Id).val();
            var DocName = $("#hdnSingleDocName_" + Id).val();
            var FileName = $("#File_" + Id).text().trim();

            if (IsMandatory.toLowerCase() == "true") {
                if (!FileName) {

                    if (html == "") html = '<ul>'
                    $("#ValidationMSG_" + Id).text("Please upload " + DocName);
                }
                else {
                    $("#ValidationMSG_" + Id).text("");
                }
            }
        });
        //if (html != "") html += '</ul>';

        //$('#FileUploadValidation').html(html);

        if (html != "") {
            return false;
        }
        else {
            return true;
        }
    }

    function OnFileUpload(ControlID, DocumentID, e, IsSignleFile) {
        var files = e.files;
        var filesize = $(e).attr("data-filesize");
        if (files.length > 0) {

            for (var i = 0; i < files.length; i++) {
                @*if (files[i].size == 0 || ((files[i].size / 1024) > parseInt(@ConfigurationManager.AppSettings["MaxContentLengthInKB"]))) {
                    //AlertDanger("File size should be between 1kb and " + parseInt(@ConfigurationManager.AppSettings["MaxContentLengthInKB"]) / 1024 + "MB");
                    $('#ValidationMSG_' + ControlID).html("File size should be between 1kb and " + parseInt(@ConfigurationManager.AppSettings["MaxContentLengthInKB"]) / 1024 + "MB");
                    return false;
                }*@
                if (files[i].size == 0 || ((files[i].size / 1024) > parseInt(filesize))) {
                    //AlertDanger("File size should be between 1kb and " + parseInt(@ConfigurationManager.AppSettings["MaxContentLengthInKB"]) / 1024 + "MB");
                    $('#ValidationMSG_' + ControlID).html("File size should be between 1kb and " + parseInt(filesize) / 1024 + "MB");
                    return false;
                }
            }
            $('#Div_' + ControlID).hide();
            $('#Loader_' + ControlID).show();
            if (window.FormData !== undefined) {
                var data = new FormData();
                for (var x = 0; x < files.length; x++) {
                    data.append("file" + x, files[x]);
                }

                $.ajax({
                    type: "POST",
                    url: "@Url.Action("UploadFiles", "Uploader")" + '?DocumentID=' + DocumentID,
                    contentType: false,
                    processData: false,
                    data: data,
                    success: function (result) {

                        if (result != null && result.IsSuccess == false) {
                            $('#Div_' + ControlID).show();
                            $('#ValidationMSG_' + ControlID).html(result.MessageText);
                            $('#Brw_' + ControlID).val('');
                            $('#Loader_' + ControlID).hide();

                            return LoadNotificationJson(result.AlterStyle, result.MessageText);
                        }
                        else if (result != null) {
                            var strData = eval(result);
                            var html = '';
                            for (var i = 0; i < strData.length; i++) {

                                var Value = "<a target='_blank' href='@Url.Content(Enums.GetEnumDescription(Enums.FolderPath.TempFilePath))/" + strData[i].UniqueFileID + "' > " + strData[i].FileName + "</a> ";
                                if (IsSignleFile) {
                                    html += "<a target='_blank' class='aTag' href='../@Url.Content(Enums.GetEnumDescription(Enums.FolderPath.TempFilePath))/" + strData[i].UniqueFileID + "' Id='DocUpload_" + ControlID + "'>" + strData[i].FileName + "</a> "
                                        + ' <input type="button" id=' + strData[i].UniqueFileID +' onclick="DeleteFile(\'' + strData[i].UniqueFileID + '\',\'' + ControlID + '\')" class="delete button clsDelete" value="Delete">';
                                }
                                else {
                                    html += "<a target='_blank' href='../@Url.Content(Enums.GetEnumDescription(Enums.FolderPath.TempFilePath))/" + strData[i].UniqueFileID + "' > " + strData[i].FileName + "</a> "
                                        + ' <a style="cursor:pointer;" id="\'' + strData[i].UniqueFileID + '\'" onclick="DeleteFile(\'' + strData[i].UniqueFileID + '\',\'' + ControlID + '\')" class="delete"><i class="fa fa-times" aria-hidden="true" title="Delete"></i></a>';
                                }
                                //html += "<input type='text' id=" + strData[i].UniqueFileID + " value=" + strData[i].FileName + " style='width: 80%;padding: 10px;border: 1px solid #ddd;'>"
                            }

                            $('#File_' + ControlID).html(html);
                            $('#Brw_' + ControlID).val('');
                            $('#ValidationMSG_' + ControlID).html('');
                            $('#Loader_' + ControlID).hide();
                        }
                    },
                    error: function (xhr, status, p3, p4) {

                        var err = "Error " + " " + status + " " + p3 + " " + p4;
                        if (xhr.responseText)
                            err = xhr.responseText;
                        console.log(err);
                        //AlertDanger(err);
                        $('#Div_' + ControlID).show();
                        $('#ValidationMSG_' + ControlID).html(err);
                        //alertify.error(err);
                        alert(err);
                        $('#Loader_' + ControlID).hide();
                    }
                });
            } else {
                alert("This browser doesn't support HTML5 file uploads!");
            }
        }
    }

    ///Delete uploaded File from Server
    function DeleteFile(UniqueFileID, ControlID) {
        //
        let text = "Are you sure wants to delete file?";
        if (confirm(text) == true) {
            $('#Loader_' + ControlID).show();
            $.ajax({
                type: "POST",
                url: '@Url.Content("~/Uploader/DeleteFile")' + '?UniqueFileID=' + UniqueFileID,
                data: null,
                contentType: "application/json; charset=utf-8",
                //dataType: "json",
                success: function (result) {
                    //alertify.success(result);
                    alert(result);
                    //$('#ValidationMSG_' + ControlID).html(result);
                    //$('ul #' + UniqueFileID.replace(/\./g, "")).remove();
                    $('#File_' + ControlID).html('');
                    $('#Div_' + ControlID).show();
                    $('#Loader_' + ControlID).hide();
                },
                error: function (xhr, status, p3, p4) {
                    var err = "Error " + " " + status + " " + p3 + " " + p4;
                    if (xhr.responseText && xhr.responseText[0] == "{")
                        err = JSON.parse(xhr.responseText).Message;
                    console.log(err);
                    //AlertDanger("Error while deleting file");
                    $('#ValidationMSG_' + ControlID).html("Error while deleting file");
                }
            });
        }
        
    }

    var hiddedidString = '@Model.HideDocumentIds';
    function SetDocumentVisibilityAndValitity() {

        var HiddenIds = hiddedidString.toString().split(',');
        if (HiddenIds.length > 0) {
            var i = 0;
            for (i = 0; i <= HiddenIds.length - 1; i++) {
                $('#tr_' + HiddenIds[i]).removeClass('ValidateRow');
                $('#tr_' + HiddenIds[i]).hide();
            }
        }
    }


    function HideDocuments(hiddedidString) {
        //debugger;
        var HiddenIds = hiddedidString.toString().split(',');
        if (HiddenIds.length > 0) {
            var i = 0;
            for (i = 0; i <= HiddenIds.length - 1; i++) {
                $('#tr_' + HiddenIds[i]).removeClass('ValidateRow');
                $('#tr_' + HiddenIds[i]).hide();
                //var id = $($("#tr_" + HiddenIds[i]).find('input')[0]).attr('id').split('_');
                //console.log(id[1]);
                $('#File_' + HiddenIds[i]).html('');
                $('#Div_' + HiddenIds[i]).show();
                $('#Loader_' + HiddenIds[i]).hide();
            }
        }
    }

    function ShowDocuments(hiddedidString) {
        //debugger;
        var HiddenIds = hiddedidString.toString().split(',');
        if (HiddenIds.length > 0) {
            var i = 0;
            for (i = 0; i <= HiddenIds.length - 1; i++) {
                if ($('#tr_' + HiddenIds[i]).attr('name') == 'ValidateRow') {
                    $('#tr_' + HiddenIds[i]).addClass("ValidateRow");
                }
                $('#tr_' + HiddenIds[i]).show();
            }
        }
    }

    function SetDocumentVisibilityAndValitityConditional(ControlID) {
        SetDocumentVisibilityAndValitity();
        //alert($('#' + ControlID.id).val());
        var ID = $('#' + ControlID.id).val();
        $('#tr_' + ID).addClass("ValidateRow");
        $('#tr_' + ID).show();
    }

    function SetNonMandatoryDocuments(hiddedidString) {
        var HiddenIds = hiddedidString.toString().split(',');
        if (HiddenIds.length > 0) {
            var i = 0;
            for (i = 0; i <= HiddenIds.length - 1; i++) {
                $('#tr_' + HiddenIds[i]).removeClass('ValidateRow');
                $($('#tr_' + HiddenIds[i]).find("span")[0]).hide();
            }
        }
    }

    function SetMandatoryDocuments(hiddedidString) {
        var HiddenIds = hiddedidString.toString().split(',');
        if (HiddenIds.length > 0) {
            var i = 0;
            for (i = 0; i <= HiddenIds.length - 1; i++) {
                if ($('#tr_' + HiddenIds[i]).attr('name') == 'ValidateRow') {
                    $('#tr_' + HiddenIds[i]).addClass("ValidateRow");
                    $($('#tr_' + HiddenIds[i]).find("span")[0]).show();
                }
            }
        }
    }
    function SaveDocumentsWithoutRequiredValidate() {
        var DocList = GetDocumentListWithoutRequiredValidate();
        if (DocList != false) {
            $("#hdnUploadedDocumentList").val(JSON.stringify(GetDocumentListWithoutRequiredValidate()));
            return true;
        }
        else {
            return false;
        }
    }
    function GetDocumentListWithoutRequiredValidate() {
        //if (!IsValidDocuments()) return false;
        var DocumentList = [];
        var DocumentCategoryID = $("#hdnDocumentCategoryID").val();

        $("#tblMainDocuments tbody tr").each(function (i, e) {
            var DocOBJ = $("td:eq(0) label:eq(0)", this);
            var spanOBJ = $("span:eq(1)", this);
            var AppDocumentID = $("td input:eq(0)", this)[0].value;
            var DocumentID = $("td input:eq(1)", this)[0].value;
            var VerifyDSC = $("td input:eq(2)", this)[0].value;
            var DocName = DocOBJ[0].innerText.replace("*", "");
            var UniqueFileName = $("span a:nth-child(2)", this).attr("id");
            var FileName = spanOBJ[0].innerText;

            if (UniqueFileName) {
                var Document = { AppDocumentID: AppDocumentID, DocumentID: DocumentID, DocName: DocName, UniqueFileName: UniqueFileName, FileName: FileName, DocumentCategoryID: DocumentCategoryID, VerifyDSC: VerifyDSC };
                DocumentList.push(Document);
            }
        });

        $("#tblOtherDocuments tbody tr").each(function (i, e) {

            var DocOBJ = $("td:eq(0) input", this);
            var spanOBJ = $("span:eq(0)", this);
            var AppDocumentID = $("td input:eq(1)", this)[0].value;
            var DocumentID = 0;
            var DocName = DocOBJ[0].value;
            var UniqueFileName = $("span a:nth-child(2)", this).attr("id");
            var FileName = spanOBJ[0].innerText;

            if (UniqueFileName) {
                var Document = { AppDocumentID: AppDocumentID, DocumentID: DocumentID, DocName: DocName, UniqueFileName: UniqueFileName, FileName: FileName, DocumentCategoryID: DocumentCategoryID };
                DocumentList.push(Document);
            }
        });

        return DocumentList;
    }
    function HideSingleDocument(Id) {
        $("#hdnSingleIsMandatory_" + Id).val(false);

        var UniqueFileID = $("#File_" + Id + " .clsDelete").attr("id");
        if (UniqueFileID != undefined && UniqueFileID != null && UniqueFileID != "") {
            $('#Loader_' + Id).show();
            $.ajax({
                type: "POST",
                url: '@Url.Content("~/Uploader/DeleteFile")',
                data: JSON.stringify({ UniqueFileID: UniqueFileID }),
                contentType: "application/json; charset=utf-8",

                success: function (result) {
                    $('#File_' + Id).html('');
                    $('#Div_' + Id).show();
                    $('#Loader_' + Id).hide();
                },
                error: function (xhr, status, p3, p4) {
                    var err = "Error " + " " + status + " " + p3 + " " + p4;
                    if (xhr.responseText && xhr.responseText[0] == "{")
                        err = JSON.parse(xhr.responseText).Message;
                    $('#ValidationMSG_' + Id).html("Error while deleting file");
                }
            });
        }
    }
    function ShowSingleDocument(Id) {
        $("#hdnSingleIsMandatory_" + Id).val(true);
    }

    function SaveSingleDocuments(TabId) {
        
        var DocList = GetDocumentListForSingleControl(TabId);

        if (DocList != false) {
            $("#hdnUploadedDocumentList_" + TabId).val(JSON.stringify(GetDocumentListForSingleControl(TabId)));
            return true;
        }
        else {
            return false;
        }
    }

    function GetDocumentListForSingleControl(TabId) {

        if (!IsValidSingleDocuments(TabId)) return false;

        var DocumentList = [];
        var DocumentCategoryID = $("#hdnDocumentCategoryID").val();

        $("#" + TabId + " .divSingleDocument").each(function (i, e) {
            var Id = $(this).attr("id");

            var DocumentCategoryID = $("#hdnSingleDocumentCategory_" + Id).val();
            var DocName = $("#hdnSingleDocName_" + Id).val();
            var FileName = $("#DocUpload_" + Id).html();
            var AppDocumentID = $("#hdnSingleAPPDocumentID_" + Id).val();
            var DocumentID = $("#hdnSingleDocumentID_" + Id).val();
            var VerifyDSC = $("#hdnSingleVerifyDSC_" + Id).val();
            var UniqueFileName = $("#File_" + Id + " .clsDelete").attr("id");
            var RelativePath = $("#hdnSingleRelativePath_" + Id).val();
            var FYID = $("#hdnSingleFYID_" + Id).val();

            if (UniqueFileName) {
                var Document = { AppDocumentID: AppDocumentID, DocumentID: DocumentID, DocName: DocName, UniqueFileName: UniqueFileName, FileName: FileName, DocumentCategoryID: DocumentCategoryID, VerifyDSC: VerifyDSC, RelativePath: RelativePath, FYID: FYID };
                DocumentList.push(Document);
            }
        });
        return DocumentList;
    }

    function IsValidSingleDocuments(TabId) {
        var html = '';

        $("#" + TabId + " .divSingleDocument").each(function (i, e) {

            var Id = $(this).attr("id");
            var IsMandatory = $("#hdnSingleIsMandatory_" + Id).val();
            var DocName = $("#hdnSingleDocName_" + Id).val();
            var FileName = $("#File_" + Id).text().trim();

            if (IsMandatory.toLowerCase() == "true") {
                if (!FileName) {

                    if (html == "") html = '<ul>'
                    $("#ValidationMSG_" + Id).text("Please upload " + DocName);
                }
                else {
                    $("#ValidationMSG_" + Id).text("");
                }
            }
        });

        if (html != "") {
            return false;
        }
        else {
            return true;
        }
    }
    function thisGetTemplateDocument(DocumentCategory, DocumentID) {
        if (!$.isFunction(window.GetTemplateDocument))
            alert('Please define GetTemplateDocument()');
        else
            GetTemplateDocument(DocumentCategory, DocumentID);
    }
</script>
@* File uploader End *@
